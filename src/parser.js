/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { start: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        peg$anyExpectation(),
        /^[\n\r]/,
        peg$classExpectation(["\n", "\r"], false, false),
        "u",
        peg$literalExpectation("u", false),
        /^[0-9a-f]/i,
        peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
        function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        "\"",
        peg$literalExpectation("\"", false),
        "\\",
        peg$literalExpectation("\\", false),
        "/",
        peg$literalExpectation("/", false),
        "b",
        peg$literalExpectation("b", false),
        function() { return "\b"; },
        "f",
        peg$literalExpectation("f", false),
        function() { return "\f"; },
        "n",
        peg$literalExpectation("n", false),
        function() { return "\n"; },
        "r",
        peg$literalExpectation("r", false),
        function() { return "\r"; },
        "t",
        peg$literalExpectation("t", false),
        function() { return "\t"; },
        "v",
        peg$literalExpectation("v", false),
        function() { return "\v"; },
        function() { return text(); },
        peg$otherExpectation("integer"),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        function() { return parseInt(text(), 10); },
        /^[_A-Za-z]/,
        peg$classExpectation(["_", ["A", "Z"], ["a", "z"]], false, false),
        /^[_0-9A-Za-z]/,
        peg$classExpectation(["_", ["0", "9"], ["A", "Z"], ["a", "z"]], false, false),
        function(head, tail) { return head + tail.join('') },
        "#",
        peg$literalExpectation("#", false),
        /^[^\n\r]/,
        peg$classExpectation(["\n", "\r"], true, false),
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        "!",
        peg$literalExpectation("!", false),
        function(sequence) { return sequence; },
        peg$otherExpectation("BlockStringCharactor"),
        "\"\"\"",
        peg$literalExpectation("\"\"\"", false),
        peg$otherExpectation("string"),
        function(chars) {
            return stripIndent(chars.join('')).trim()
          },
        function(chars) {  return chars.join('')  },
        "-",
        peg$literalExpectation("-", false),
        "0",
        peg$literalExpectation("0", false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        ".",
        peg$literalExpectation(".", false),
        "e",
        peg$literalExpectation("e", false),
        "E",
        peg$literalExpectation("E", false),
        "+",
        peg$literalExpectation("+", false),
        function() {
            return parseFloat(text())
          },
        ":",
        peg$literalExpectation(":", false),
        function(name, value) {
            return [name, value]
          },
        "{",
        peg$literalExpectation("{", false),
        function(p) { return p },
        "}",
        peg$literalExpectation("}", false),
        function(props) {
          	return fromEntries(props)
          },
        function(head) {
            return head.map((element) => element[1])
          },
        "=",
        peg$literalExpectation("=", false),
        "$",
        peg$literalExpectation("$", false),
        function() { return text() },
        function(variable, type, dflt) { return { variable, type, defaultValue: dflt } },
        "(",
        peg$literalExpectation("(", false),
        function(v) { return v },
        ")",
        peg$literalExpectation(")", false),
        function(vars) { return vars },
        function(name, value) { return [name, value] },
        function(arg) { return arg },
        function(args) { return fromEntries(args) },
        function(alias) { return alias },
        function(alias, name, args, d, s) {
            return { name, alias, args, s, directives: d }
          },
        function(f) { return f },
        function(fields) {
          	return {
              kind: 'selection',
              properties: fields
            }
          },
        "query",
        peg$literalExpectation("query", false),
        "mutation",
        peg$literalExpectation("mutation", false),
        "subscription",
        peg$literalExpectation("subscription", false),
        function(type, name, vars, d, s) {
            return {
            	operationType: type,
                name,
                variables: vars,
                directives: d,
                selection: s
            }
          },
        function(s) {
            return {
            	operationType: 'query',
                selection: s
            }
          },
        "on",
        peg$literalExpectation("on", false),
        function(type) { return type },
        "@",
        peg$literalExpectation("@", false),
        function(n, a) { return {kind: 'Directive', name: n, args: a } },
        function(d) { return d },
        "fragment",
        peg$literalExpectation("fragment", false),
        function(name, type) {
        	return fragment(name, type)
          },
        "...",
        peg$literalExpectation("...", false),
        function(name, s) {
        	return { kind: 'fragmentSpread', selecton: s }
          },
        function(type, s) {
        	return { kind: 'InlineSpread', type, selecton: s }
          },
        function(ot, nt) { return [ot, nt ]},
        function(defs) {
            return fromEntries(defs)
          },
        "schema",
        peg$literalExpectation("schema", false),
        function(description, directives, def) {
            return {
              kind: 'schema',
              description,
              directives,
              definitions: def
            }
          },
        "scalar",
        peg$literalExpectation("scalar", false),
        function(description, name, directives) {
              return {
                kind: 'scalar',
                description,
                name,
                directives
              }
            },
        "union",
        peg$literalExpectation("union", false),
        function(description, name, directives, members) {
              return { kind: 'union', description, name, directives, members }
            },
        "|",
        peg$literalExpectation("|", false),
        function(head, t) { return t },
        function(head, tail) {
              return [head].concat(tail)
            },
        "enum",
        peg$literalExpectation("enum", false),
        function(description, name, directives, values) {
              return { kind: 'enum', description, values, directives }
            },
        function(defs) {
              return defs
            },
        function(description, value, directives) {
              return { description, value, directives }
            },
        "type",
        peg$literalExpectation("type", false),
        function(description, name, impls, directives, fields) {
              return { kind: 'object', description, name, impls, directives, fields: fields || [] }
            },
        "interface",
        peg$literalExpectation("interface", false),
        function(description, name, impls, directives, fields) {
              return { kind: 'interface', description, name, impls, directives, fields: fields || [] }
            },
        function(description, name, args, type, directives) {
              return { name, type, description, args, directives }
            },
        function(fields) { return fields },
        function(description, name, type, defaultValue, directives) {
              return { name, type, description, defaultValue, directives }
            },
        function(args) { return args },
        "implements",
        peg$literalExpectation("implements", false),
        "&",
        peg$literalExpectation("&", false),
        "input",
        peg$literalExpectation("input", false),
        function(description, name, directives, fields) {
              return { kind: 'input', description, name, directives, fields: fields || [] }
            },
        "directive",
        peg$literalExpectation("directive", false),
        "repeatable",
        peg$literalExpectation("repeatable", false),
        function(description, name, args, r, locations) {
              return { kind: 'directive', description, name, repeatable: !!r, args, locations }
            },
        "QUERY",
        peg$literalExpectation("QUERY", false),
        "MUTATION",
        peg$literalExpectation("MUTATION", false),
        "SUBSCRIPTION",
        peg$literalExpectation("SUBSCRIPTION", false),
        "FIELD",
        peg$literalExpectation("FIELD", false),
        "FRAGMENT_DEFINITION",
        peg$literalExpectation("FRAGMENT_DEFINITION", false),
        "FRAGMENT_SPREAD",
        peg$literalExpectation("FRAGMENT_SPREAD", false),
        "INLINE_FRAGMENT",
        peg$literalExpectation("INLINE_FRAGMENT", false),
        "VARIABLE_DEFINITION",
        peg$literalExpectation("VARIABLE_DEFINITION", false),
        "SCHEMA",
        peg$literalExpectation("SCHEMA", false),
        "SCALAR",
        peg$literalExpectation("SCALAR", false),
        "OBJECT",
        peg$literalExpectation("OBJECT", false),
        "FIELD_DEFINITION",
        peg$literalExpectation("FIELD_DEFINITION", false),
        "ARGUMENT_DEFINITION",
        peg$literalExpectation("ARGUMENT_DEFINITION", false),
        "INTERFACE",
        peg$literalExpectation("INTERFACE", false),
        "UNION",
        peg$literalExpectation("UNION", false),
        "ENUM",
        peg$literalExpectation("ENUM", false),
        "ENUM_VALUE",
        peg$literalExpectation("ENUM_VALUE", false),
        "INPUT_OBJECT",
        peg$literalExpectation("INPUT_OBJECT", false),
        "INPUT_FIELD_DEFINITION",
        peg$literalExpectation("INPUT_FIELD_DEFINITION", false),
        "extend",
        peg$literalExpectation("extend", false),
        function(directives, def) {
              return {
                kind: 'schemaExtension',
                directives,
                definitions: def
              }
            },
        function(directives) {
              return {
                kind: 'schemaExtension',
                directives,
                definitions: null
              }
            },
        function(name, directives) { return { kind: 'scalarExtension', name, directives } },
        function(name, impls, directives, fields) {
              return { kind: 'objectExtension', name, impls, directives, fields }
            },
        function(name, impls, directives) {
              return { kind: 'objectExtension', name, impls, directives, fields: [] }
            },
        function(name, impls) {
              return { kind: 'objectExtension', name, impls, directives: null, fields: [] }
            },
        function(name, impls, directives, fields) {
              return { kind: 'interfaceExtension', name, impls, directives, fields }
            },
        function(name, impls, directives) {
              return { kind: 'interfaceExtension', name, impls, directives, fields: [] }
            },
        function(name, impls) {
              return { kind: 'interfaceExtension', name, impls, directives: null, fields: [] }
            },
        function(name, directives, members) {
               return { kind: 'unionExtension', name, directives, members }
            },
        function(name, directives) {
              return { kind: 'unionExtension', name, directives, members: null }
            },
        function(name, directives, values) {
               return { kind: 'enumExtension', name, directives, values }
            },
        function(name, directives) {
              return { kind: 'enumExtension', name, directives, values: null }
            },
        function(name, directives, fields) {
               return { kind: 'inputExtension', name, directives, fields }
            },
        function(name, directives) {
              return { kind: 'inputExtension', name, directives, fields: null }
            },
        function(def) { return def },
        function(ops) { return { definitions: ops } },
        /^[_a-zA-Z0-9]/,
        peg$classExpectation(["_", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
        /^[ \t,]/,
        peg$classExpectation([" ", "\t", ","], false, false),
        function() {1,2},
        peg$otherExpectation("whitespace"),
        /^[ \t\n\r,]/,
        peg$classExpectation([" ", "\t", "\n", "\r", ","], false, false)
      ],

      peg$bytecode = [
        peg$decode(";k"),
        peg$decode("1\"\"5!7 "),
        peg$decode("4!\"\"5!7\""),
        peg$decode(";$.# &;%.\x85 &%2#\"\"6#7$/u#%%4%\"\"5!7&/P#4%\"\"5!7&/A$4%\"\"5!7&/2$4%\"\"5!7&/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":'\"! )(\"'#&'#"),
        peg$decode("2(\"\"6(7).\xCB &2*\"\"6*7+.\xBF &2,\"\"6,7-.\xB3 &2#\"\"6#7$.\xA7 &%2.\"\"6.7//& 8!:0! ).\x90 &%21\"\"6172/& 8!:3! ).y &%24\"\"6475/& 8!:6! ).b &%27\"\"6778/& 8!:9! ).K &%2:\"\"6:7;/& 8!:<! ).4 &%2=\"\"6=7>/& 8!:?! )"),
        peg$decode("%%<;$.# &;\"=.##&&!&'#/0#;!/'$8\":@\" )(\"'#&'#"),
        peg$decode("<%;p/I#$4B\"\"5!7C/,#0)*4B\"\"5!7C&&&#/'$8\":D\" )(\"'#&'#=.\" 7A"),
        peg$decode("%4E\"\"5!7F/E#$4G\"\"5!7H0)*4G\"\"5!7H&/)$8\":I\"\"! )(\"'#&'#"),
        peg$decode("%2J\"\"6J7K/H#$4L\"\"5!7M0)*4L\"\"5!7M&/,$;o/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2N\"\"6N7O/M#;p/D$;+/;$;p/2$2P\"\"6P7Q/#$+%)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;'/2#2R\"\"6R7S/#$+\")(\"'#&'#.< &%;)/2#2R\"\"6R7S/#$+\")(\"'#&'#"),
        peg$decode(";*.) &;'.# &;)"),
        peg$decode(";2.; &;3.5 &;/./ &;0.) &;'.# &;5"),
        peg$decode("%%<2(\"\"6(7)./ &2*\"\"6*7+.# &;\"=.##&&!&'#/0#;!/'$8\":@\" )(\"'#&'#.A &%2*\"\"6*7+/1#;#/($8\":T\"! )(\"'#&'#"),
        peg$decode("<%%<2V\"\"6V7W=.##&&!&'#/0#;!/'$8\":@\" )(\"'#&'#=.\" 7U"),
        peg$decode("<%2V\"\"6V7W/G#$;.0#*;.&/7$2V\"\"6V7W/($8#:Y#!!)(#'#(\"'#&'#.W &%2(\"\"6(7)/G#$;-0#*;-&/7$2(\"\"6(7)/($8#:Z#!!)(#'#(\"'#&'#=.\" 7X"),
        peg$decode("%2[\"\"6[7\\.\" &\"/\u0114#2]\"\"6]7^.O &%4_\"\"5!7`/?#$4B\"\"5!7C0)*4B\"\"5!7C&/#$+\")(\"'#&'#/\xD3$%2a\"\"6a7b/E#$4B\"\"5!7C/,#0)*4B\"\"5!7C&&&#/#$+\")(\"'#&'#.\" &\"/\x93$%2c\"\"6c7d.) &2e\"\"6e7f/e#2g\"\"6g7h.) &2[\"\"6[7\\.\" &\"/E$$4B\"\"5!7C/,#0)*4B\"\"5!7C&&&#/#$+#)(#'#(\"'#&'#.\" &\"/'$8$:i$ )($'#(#'#(\"'#&'#"),
        peg$decode("%;'/S#;p/J$2j\"\"6j7k/;$;p/2$;,/)$8%:l%\"$ )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2m\"\"6m7n/\x89#$%;p/:#;1/1$;p/($8#:o#!!)(#'#(\"'#&'#0D*%;p/:#;1/1$;p/($8#:o#!!)(#'#(\"'#&'#&/7$2p\"\"6p7q/($8#:r#!!)(#'#(\"'#&'#"),
        peg$decode("%2N\"\"6N7O/\x7F#$%;p/5#;,/,$;p/#$+#)(#'#(\"'#&'#0?*%;p/5#;,/,$;p/#$+#)(#'#(\"'#&'#&/7$2P\"\"6P7Q/($8#:s#!!)(#'#(\"'#&'#"),
        peg$decode("%2t\"\"6t7u/5#;p/,$;,/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2v\"\"6v7w/0#;'/'$8\":x\" )(\"'#&'#"),
        peg$decode("%;5/b#2j\"\"6j7k/S$;p/J$;+/A$;p/8$;4.\" &\"/*$8&:y&#%\" )(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2z\"\"6z7{/\x98#$%;p/:#;6/1$;p/($8#:|#!!)(#'#(\"'#&'#/G#0D*%;p/:#;6/1$;p/($8#:|#!!)(#'#(\"'#&'#&&&#/@$;p/7$2}\"\"6}7~/($8$:\x7F$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%;p/e#;'/\\$;p/S$2j\"\"6j7k/D$;p/;$;,/2$;p/)$8':\x80'\"%!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2z\"\"6z7{/\x92#$%;p/:#;8/1$;p/($8#:\x81#!!)(#'#(\"'#&'#0D*%;p/:#;8/1$;p/($8#:\x81#!!)(#'#(\"'#&'#&/@$;p/7$2}\"\"6}7~/($8$:\x82$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%;'/@#;p/7$2j\"\"6j7k/($8#:\x83#!\")(#'#(\"'#&'#"),
        peg$decode("%;:.\" &\"/q#;p/h$;'/_$;p/V$;9.\" &\"/H$;B.\" &\"/:$;=.\" &\"/,$8':\x84'%&$\"! )(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";;.) &;D.# &;E"),
        peg$decode("%2m\"\"6m7n/\x89#$%;p/:#;</1$;p/($8#:\x85#!!)(#'#(\"'#&'#0D*%;p/:#;</1$;p/($8#:\x85#!!)(#'#(\"'#&'#&/7$2p\"\"6p7q/($8#:\x86#!!)(#'#(\"'#&'#"),
        peg$decode("2\x87\"\"6\x877\x88.5 &2\x89\"\"6\x897\x8A.) &2\x8B\"\"6\x8B7\x8C"),
        peg$decode("%;p/\x8C#;>/\x83$;p/z$;'.\" &\"/l$;p/c$;7.\" &\"/U$;p/L$;B.\" &\"/>$;p/5$;=/,$8*:\x8D*%(&$\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.; &%;p/1#;=/($8\":\x8E\"! )(\"'#&'#"),
        peg$decode("%2\x8F\"\"6\x8F7\x90/:#;p/1$;'/($8#:\x91#! )(#'#(\"'#&'#"),
        peg$decode("%2\x92\"\"6\x927\x93/I#;'/@$;p/7$;9.\" &\"/)$8$:\x94$\"\" )($'#(#'#(\"'#&'#"),
        peg$decode("$%;A/1#;p/($8\":\x95\"!!)(\"'#&'#0;*%;A/1#;p/($8\":\x95\"!!)(\"'#&'#&"),
        peg$decode("%2\x96\"\"6\x967\x97/_#;p/V$;'/M$;p/D$;@/;$;p/2$;=/)$8':\x98'\"$\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\x99\"\"6\x997\x9A/M#;p/D$;'/;$;p/2$;=/)$8%:\x9B%\"\" )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\x99\"\"6\x997\x9A/M#;p/D$;@/;$;p/2$;=/)$8%:\x9C%\"\" )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\\#;>/S$2j\"\"6j7k/D$;p/;$;'/2$;p/)$8&:\x9D&\"$!)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2m\"\"6m7n/\x98#$%;p/:#;F/1$;p/($8#:\x95#!!)(#'#(\"'#&'#/G#0D*%;p/:#;F/1$;p/($8#:\x95#!!)(#'#(\"'#&'#&&&#/@$;p/7$2p\"\"6p7q/($8$:\x9E$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\x82#;/.\" &\"/t$;p/k$2\x9F\"\"6\x9F7\xA0/\\$;p/S$;B.\" &\"/E$;p/<$;G/3$;p/*$8):\xA1)#'#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";J.; &;P.5 &;Q./ &;K.) &;M.# &;W"),
        peg$decode("%;p/\x82#;/.\" &\"/t$;p/k$2\xA2\"\"6\xA27\xA3/\\$;p/S$;'/J$;p/A$;B.\" &\"/3$;p/*$8):\xA4)#'#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\x9A#;/.\" &\"/\x8C$;p/\x83$2\xA5\"\"6\xA57\xA6/t$;p/k$;'/b$;p/Y$;B.\" &\"/K$;p/B$;L.\" &\"/4$;p/+$8+:\xA7+$)%#!)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xF1#2t\"\"6t7u/\xE2$;p/\xD9$2\xA8\"\"6\xA87\xA9.\" &\"/\xC5$;p/\xBC$;'/\xB3$;p/\xAA$$%2\xA8\"\"6\xA87\xA9/D#;p/;$;'/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#/W#0T*%2\xA8\"\"6\xA87\xA9/D#;p/;$;'/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#&&&#/2$;p/)$8):\xAB)\"#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\x95#;/.\" &\"/\x87$;p/~$2\xAC\"\"6\xAC7\xAD/o$;p/f$;'/]$;p/T$;B.\" &\"/F$;p/=$;N/4$;p/+$8+:\xAE+$)%#!)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2m\"\"6m7n/\x98#$%;p/:#;O/1$;p/($8#:\x95#!!)(#'#(\"'#&'#/G#0D*%;p/:#;O/1$;p/($8#:\x95#!!)(#'#(\"'#&'#&&&#/@$;p/7$2p\"\"6p7q/($8$:\xAF$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%;p/j#;/.\" &\"/\\$;p/S$;'/J$;p/A$;B.\" &\"/3$;p/*$8':\xB0'#%#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xB2#;/.\" &\"/\xA4$;p/\x9B$2\xB1\"\"6\xB17\xB2/\x8C$;p/\x83$;'/z$;p/q$;V.\" &\"/c$;p/Z$;B.\" &\"/L$;p/C$;S.\" &\"/5$;p/,$8-:\xB3-%+'%#!)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xB2#;/.\" &\"/\xA4$;p/\x9B$2\xB4\"\"6\xB47\xB5/\x8C$;p/\x83$;'/z$;p/q$;V.\" &\"/c$;p/Z$;B.\" &\"/L$;p/C$;S.\" &\"/5$;p/,$8-:\xB6-%+'%#!)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xAD#;/.\" &\"/\x9F$;p/\x96$;'/\x8D$;p/\x84$;U.\" &\"/v$;p/m$2j\"\"6j7k/^$;p/U$;+/L$;p/C$;B.\" &\"/5$;p/,$8-:\xB7-%+)'#!)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2m\"\"6m7n/\x89#$%;p/:#;R/1$;p/($8#:\x85#!!)(#'#(\"'#&'#0D*%;p/:#;R/1$;p/($8#:\x85#!!)(#'#(\"'#&'#&/7$2p\"\"6p7q/($8#:\xB8#!!)(#'#(\"'#&'#"),
        peg$decode("%;p/\xAD#;/.\" &\"/\x9F$;p/\x96$;'/\x8D$;p/\x84$2j\"\"6j7k/u$;p/l$;+/c$;p/Z$;4.\" &\"/L$;p/C$;B.\" &\"/5$;p/,$8-:\xB9-%+)%#!)(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2z\"\"6z7{/\x92#$%;p/:#;T/1$;p/($8#:\x81#!!)(#'#(\"'#&'#0D*%;p/:#;T/1$;p/($8#:\x81#!!)(#'#(\"'#&'#&/@$;p/7$2}\"\"6}7~/($8$:\xBA$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%2\xBB\"\"6\xBB7\xBC/\xDC#;p/\xD3$2\xBD\"\"6\xBD7\xBE.\" &\"/\xBF$;p/\xB6$;'/\xAD$;p/\xA4$$%2\xBD\"\"6\xBD7\xBE/D#;p/;$;'/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#0T*%2\xBD\"\"6\xBD7\xBE/D#;p/;$;'/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#&/2$;p/)$8(:\xAB(\"#!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\x9A#;/.\" &\"/\x8C$;p/\x83$2\xBF\"\"6\xBF7\xC0/t$;p/k$;'/b$;p/Y$;B.\" &\"/K$;p/B$;X.\" &\"/4$;p/+$8+:\xC1+$)%#!)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2m\"\"6m7n/\x92#$%;p/:#;T/1$;p/($8#:\x81#!!)(#'#(\"'#&'#0D*%;p/:#;T/1$;p/($8#:\x81#!!)(#'#(\"'#&'#&/@$;p/7$2p\"\"6p7q/($8$:\xBA$!\")($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xD5#;/.\" &\"/\xC7$;p/\xBE$2\xC2\"\"6\xC27\xC3/\xAF$;p/\xA6$2\x92\"\"6\x927\x93/\x97$;'/\x8E$;p/\x85$;U/|$;p/s$2\xC4\"\"6\xC47\xC5.\" &\"/_$;p/V$2\x8F\"\"6\x8F7\x90/G$;p/>$;Z/5$;p/,$80:\xC60%.)'%!)(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;p/\xD3#2\xA8\"\"6\xA87\xA9.\" &\"/\xBF$;p/\xB6$;[/\xAD$;p/\xA4$$%2\xA8\"\"6\xA87\xA9/D#;p/;$;[/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#0T*%2\xA8\"\"6\xA87\xA9/D#;p/;$;[/2$;p/)$8$:\xAA$\"'!)($'#(#'#(\"'#&'#&/2$;p/)$8':\xAB'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";\\.# &;]"),
        peg$decode("%2\xC7\"\"6\xC77\xC8/,#;l/#$+\")(\"'#&'#.\xE3 &%2\xC9\"\"6\xC97\xCA/,#;l/#$+\")(\"'#&'#.\xC4 &2\xCB\"\"6\xCB7\xCC.\xB8 &%2\xCD\"\"6\xCD7\xCE/,#;l/#$+\")(\"'#&'#.\x99 &%2\xCF\"\"6\xCF7\xD0/,#;l/#$+\")(\"'#&'#.z &%2\xD1\"\"6\xD17\xD2/,#;l/#$+\")(\"'#&'#.[ &%2\xD3\"\"6\xD37\xD4/,#;l/#$+\")(\"'#&'#.< &%2\xD5\"\"6\xD57\xD6/,#;l/#$+\")(\"'#&'#"),
        peg$decode("%2\xD7\"\"6\xD77\xD8/,#;l/#$+\")(\"'#&'#.\u0153 &%2\xD9\"\"6\xD97\xDA/,#;l/#$+\")(\"'#&'#.\u0134 &%2\xDB\"\"6\xDB7\xDC/,#;l/#$+\")(\"'#&'#.\u0115 &%2\xDD\"\"6\xDD7\xDE/,#;l/#$+\")(\"'#&'#.\xF6 &%2\xDF\"\"6\xDF7\xE0/,#;l/#$+\")(\"'#&'#.\xD7 &%2\xE1\"\"6\xE17\xE2/,#;l/#$+\")(\"'#&'#.\xB8 &%2\xE3\"\"6\xE37\xE4/,#;l/#$+\")(\"'#&'#.\x99 &%2\xE5\"\"6\xE57\xE6/,#;l/#$+\")(\"'#&'#.z &%2\xE7\"\"6\xE77\xE8/,#;l/#$+\")(\"'#&'#.[ &%2\xE9\"\"6\xE97\xEA/,#;l/#$+\")(\"'#&'#.< &%2\xEB\"\"6\xEB7\xEC/,#;l/#$+\")(\"'#&'#"),
        peg$decode(";`.# &;a"),
        peg$decode("%;p/;#2\xED\"\"6\xED7\xEE/,$;p/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;_/j#2\x9F\"\"6\x9F7\xA0/[$;p/R$;B.\" &\"/D$;p/;$;G/2$;p/)$8':\xEF'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#.\\ &%;_/R#2\x9F\"\"6\x9F7\xA0/C$;p/:$;B/1$;p/($8%:\xF0%!!)(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";b.; &;c.5 &;d./ &;e.) &;f.# &;g"),
        peg$decode("%;_/e#2\xA2\"\"6\xA27\xA3/V$;p/M$;'/D$;p/;$;B/2$;p/)$8':\xF1'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;_/\x95#2\xB1\"\"6\xB17\xB2/\x86$;p/}$;'/t$;p/k$;V.\" &\"/]$;p/T$;B.\" &\"/F$;p/=$;S/4$;p/+$8+:\xF2+$'%#!)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD9 &%;_/}#2\xB1\"\"6\xB17\xB2/n$;p/e$;'/\\$;p/S$;V.\" &\"/E$;p/<$;B/3$;p/*$8):\xF3)#%#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.o &%;_/e#2\xB1\"\"6\xB17\xB2/V$;p/M$;'/D$;p/;$;V/2$;p/)$8':\xF4'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;_/\x95#2\xB4\"\"6\xB47\xB5/\x86$;p/}$;'/t$;p/k$;V.\" &\"/]$;p/T$;B.\" &\"/F$;p/=$;S/4$;p/+$8+:\xF5+$'%#!)(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xD9 &%;_/}#2\xB4\"\"6\xB47\xB5/n$;p/e$;'/\\$;p/S$;V.\" &\"/E$;p/<$;B/3$;p/*$8):\xF6)#%#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.o &%;_/e#2\xB4\"\"6\xB47\xB5/V$;p/M$;'/D$;p/;$;V/2$;p/)$8':\xF7'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;_/}#2\xA5\"\"6\xA57\xA6/n$;p/e$;'/\\$;p/S$;B.\" &\"/E$;p/<$;L/3$;p/*$8):\xF8)#%#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.o &%;_/e#2\xA5\"\"6\xA57\xA6/V$;p/M$;'/D$;p/;$;B/2$;p/)$8':\xF9'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;_/}#2\xAC\"\"6\xAC7\xAD/n$;p/e$;'/\\$;p/S$;B.\" &\"/E$;p/<$;N/3$;p/*$8):\xFA)#%#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.o &%;_/e#2\xAC\"\"6\xAC7\xAD/V$;p/M$;'/D$;p/;$;B/2$;p/)$8':\xFB'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;_/}#2\xBF\"\"6\xBF7\xC0/n$;p/e$;'/\\$;p/S$;B.\" &\"/E$;p/<$;X/3$;p/*$8):\xFC)#%#!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.o &%;_/e#2\xBF\"\"6\xBF7\xC0/V$;p/M$;'/D$;p/;$;B/2$;p/)$8':\xFD'\"#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";H.) &;I.# &;Y"),
        peg$decode(";?.# &;C"),
        peg$decode(";i.) &;h.# &;^"),
        peg$decode("%$%;p/:#;j/1$;p/($8#:\xFE#!!)(#'#(\"'#&'#0D*%;p/:#;j/1$;p/($8#:\xFE#!!)(#'#(\"'#&'#&/' 8!:\xFF!! )"),
        peg$decode("%<$4\u0100\"\"5!7\u0101/,#0)*4\u0100\"\"5!7\u0101&&&#=.##&&!&'#"),
        peg$decode("4\u0102\"\"5!7\u0103"),
        peg$decode("%<1\"\"5!7 =.##&&!&'#"),
        peg$decode("%4!\"\"5!7\"/& 8!:\u0104! ).# &;n"),
        peg$decode("<%$;m0#*;m&/,#;(/#$+\")(\"'#&'#.6 &$4\u0106\"\"5!7\u01070)*4\u0106\"\"5!7\u0107&=.\" 7\u0105")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    const stripIndent = require('strip-indent')
    const fromEntries = Object.fromEntries ||  ((iterable) => {
      return [...iterable].reduce((obj, [key, val]) => {
        obj[key] = val
        return obj
      }, {})
    })



  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
